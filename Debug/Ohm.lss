
Ohm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000111c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000111c  00001190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000216c  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a8  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  000039b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d56  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  0000482e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000883  00000000  00000000  00004bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00005448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029b  00000000  00000000  000055f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000790  00000000  00000000  0000588f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <main>
      8a:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
 */ 
#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF
      92:	3e 9a       	sbi	0x07, 6	; 7
	
	SET_BIT(ADCSRA,ADEN); // enable ADC
      94:	37 9a       	sbi	0x06, 7	; 6
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
      96:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
      98:	31 9a       	sbi	0x06, 1	; 6
}
      9a:	08 95       	ret

0000009c <ADC_u16Read>:
unsigned short ADC_u16Read(void)
{
	unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
      9c:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
      9e:	34 9b       	sbis	0x06, 4	; 6
      a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
      a2:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
      a4:	84 b1       	in	r24, 0x04	; 4
      a6:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
      a8:	45 b1       	in	r20, 0x05	; 5
      aa:	34 2f       	mov	r19, r20
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	82 2b       	or	r24, r18
      b0:	93 2b       	or	r25, r19
	return read_val ;
      b2:	08 95       	ret

000000b4 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      b4:	82 34       	cpi	r24, 0x42	; 66
      b6:	51 f1       	breq	.+84     	; 0x10c <DIO_vsetPINDir+0x58>
      b8:	83 34       	cpi	r24, 0x43	; 67
      ba:	20 f4       	brcc	.+8      	; 0xc4 <DIO_vsetPINDir+0x10>
      bc:	81 34       	cpi	r24, 0x41	; 65
      be:	09 f0       	breq	.+2      	; 0xc2 <DIO_vsetPINDir+0xe>
      c0:	7b c0       	rjmp	.+246    	; 0x1b8 <DIO_vsetPINDir+0x104>
      c2:	07 c0       	rjmp	.+14     	; 0xd2 <DIO_vsetPINDir+0x1e>
      c4:	83 34       	cpi	r24, 0x43	; 67
      c6:	09 f4       	brne	.+2      	; 0xca <DIO_vsetPINDir+0x16>
      c8:	3e c0       	rjmp	.+124    	; 0x146 <DIO_vsetPINDir+0x92>
      ca:	84 34       	cpi	r24, 0x44	; 68
      cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_vsetPINDir+0x1c>
      ce:	74 c0       	rjmp	.+232    	; 0x1b8 <DIO_vsetPINDir+0x104>
      d0:	57 c0       	rjmp	.+174    	; 0x180 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
      d2:	41 30       	cpi	r20, 0x01	; 1
      d4:	69 f4       	brne	.+26     	; 0xf0 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
      d6:	2a b3       	in	r18, 0x1a	; 26
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	ac 01       	movw	r20, r24
      de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_vsetPINDir+0x30>
      e0:	44 0f       	add	r20, r20
      e2:	55 1f       	adc	r21, r21
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_vsetPINDir+0x2c>
      e8:	ba 01       	movw	r22, r20
      ea:	62 2b       	or	r22, r18
      ec:	6a bb       	out	0x1a, r22	; 26
      ee:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
      f0:	2a b3       	in	r18, 0x1a	; 26
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	ac 01       	movw	r20, r24
      f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_vsetPINDir+0x4a>
      fa:	44 0f       	add	r20, r20
      fc:	55 1f       	adc	r21, r21
      fe:	6a 95       	dec	r22
     100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_vsetPINDir+0x46>
     102:	ba 01       	movw	r22, r20
     104:	60 95       	com	r22
     106:	62 23       	and	r22, r18
     108:	6a bb       	out	0x1a, r22	; 26
     10a:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
     10c:	41 30       	cpi	r20, 0x01	; 1
     10e:	69 f4       	brne	.+26     	; 0x12a <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     110:	27 b3       	in	r18, 0x17	; 23
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	ac 01       	movw	r20, r24
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x6a>
     11a:	44 0f       	add	r20, r20
     11c:	55 1f       	adc	r21, r21
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x66>
     122:	ba 01       	movw	r22, r20
     124:	62 2b       	or	r22, r18
     126:	67 bb       	out	0x17, r22	; 23
     128:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	ac 01       	movw	r20, r24
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_vsetPINDir+0x84>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	6a 95       	dec	r22
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_vsetPINDir+0x80>
     13c:	ba 01       	movw	r22, r20
     13e:	60 95       	com	r22
     140:	62 23       	and	r22, r18
     142:	67 bb       	out	0x17, r22	; 23
     144:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     146:	41 30       	cpi	r20, 0x01	; 1
     148:	69 f4       	brne	.+26     	; 0x164 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     14a:	24 b3       	in	r18, 0x14	; 20
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	ac 01       	movw	r20, r24
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_vsetPINDir+0xa4>
     154:	44 0f       	add	r20, r20
     156:	55 1f       	adc	r21, r21
     158:	6a 95       	dec	r22
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_vsetPINDir+0xa0>
     15c:	ba 01       	movw	r22, r20
     15e:	62 2b       	or	r22, r18
     160:	64 bb       	out	0x14, r22	; 20
     162:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     164:	24 b3       	in	r18, 0x14	; 20
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	ac 01       	movw	r20, r24
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_vsetPINDir+0xbe>
     16e:	44 0f       	add	r20, r20
     170:	55 1f       	adc	r21, r21
     172:	6a 95       	dec	r22
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_vsetPINDir+0xba>
     176:	ba 01       	movw	r22, r20
     178:	60 95       	com	r22
     17a:	62 23       	and	r22, r18
     17c:	64 bb       	out	0x14, r22	; 20
     17e:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     180:	41 30       	cpi	r20, 0x01	; 1
     182:	69 f4       	brne	.+26     	; 0x19e <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     184:	21 b3       	in	r18, 0x11	; 17
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	ac 01       	movw	r20, r24
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_vsetPINDir+0xde>
     18e:	44 0f       	add	r20, r20
     190:	55 1f       	adc	r21, r21
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_vsetPINDir+0xda>
     196:	ba 01       	movw	r22, r20
     198:	62 2b       	or	r22, r18
     19a:	61 bb       	out	0x11, r22	; 17
     19c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     19e:	21 b3       	in	r18, 0x11	; 17
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	ac 01       	movw	r20, r24
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_vsetPINDir+0xf8>
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	6a 95       	dec	r22
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_vsetPINDir+0xf4>
     1b0:	ba 01       	movw	r22, r20
     1b2:	60 95       	com	r22
     1b4:	62 23       	and	r22, r18
     1b6:	61 bb       	out	0x11, r22	; 17
     1b8:	08 95       	ret

000001ba <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     1ba:	82 34       	cpi	r24, 0x42	; 66
     1bc:	51 f1       	breq	.+84     	; 0x212 <DIO_write+0x58>
     1be:	83 34       	cpi	r24, 0x43	; 67
     1c0:	20 f4       	brcc	.+8      	; 0x1ca <DIO_write+0x10>
     1c2:	81 34       	cpi	r24, 0x41	; 65
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_write+0xe>
     1c6:	7b c0       	rjmp	.+246    	; 0x2be <DIO_write+0x104>
     1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <DIO_write+0x1e>
     1ca:	83 34       	cpi	r24, 0x43	; 67
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_write+0x16>
     1ce:	3e c0       	rjmp	.+124    	; 0x24c <DIO_write+0x92>
     1d0:	84 34       	cpi	r24, 0x44	; 68
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <DIO_write+0x1c>
     1d4:	74 c0       	rjmp	.+232    	; 0x2be <DIO_write+0x104>
     1d6:	57 c0       	rjmp	.+174    	; 0x286 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
     1d8:	41 30       	cpi	r20, 0x01	; 1
     1da:	69 f4       	brne	.+26     	; 0x1f6 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     1dc:	2b b3       	in	r18, 0x1b	; 27
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	ac 01       	movw	r20, r24
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_write+0x30>
     1e6:	44 0f       	add	r20, r20
     1e8:	55 1f       	adc	r21, r21
     1ea:	6a 95       	dec	r22
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_write+0x2c>
     1ee:	ba 01       	movw	r22, r20
     1f0:	62 2b       	or	r22, r18
     1f2:	6b bb       	out	0x1b, r22	; 27
     1f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     1f6:	2b b3       	in	r18, 0x1b	; 27
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	ac 01       	movw	r20, r24
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0x4a>
     200:	44 0f       	add	r20, r20
     202:	55 1f       	adc	r21, r21
     204:	6a 95       	dec	r22
     206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x46>
     208:	ba 01       	movw	r22, r20
     20a:	60 95       	com	r22
     20c:	62 23       	and	r22, r18
     20e:	6b bb       	out	0x1b, r22	; 27
     210:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	69 f4       	brne	.+26     	; 0x230 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     216:	28 b3       	in	r18, 0x18	; 24
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	ac 01       	movw	r20, r24
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_write+0x6a>
     220:	44 0f       	add	r20, r20
     222:	55 1f       	adc	r21, r21
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_write+0x66>
     228:	ba 01       	movw	r22, r20
     22a:	62 2b       	or	r22, r18
     22c:	68 bb       	out	0x18, r22	; 24
     22e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     230:	28 b3       	in	r18, 0x18	; 24
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	ac 01       	movw	r20, r24
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_write+0x84>
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_write+0x80>
     242:	ba 01       	movw	r22, r20
     244:	60 95       	com	r22
     246:	62 23       	and	r22, r18
     248:	68 bb       	out	0x18, r22	; 24
     24a:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     24c:	41 30       	cpi	r20, 0x01	; 1
     24e:	69 f4       	brne	.+26     	; 0x26a <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     250:	25 b3       	in	r18, 0x15	; 21
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	ac 01       	movw	r20, r24
     258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_write+0xa4>
     25a:	44 0f       	add	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_write+0xa0>
     262:	ba 01       	movw	r22, r20
     264:	62 2b       	or	r22, r18
     266:	65 bb       	out	0x15, r22	; 21
     268:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     26a:	25 b3       	in	r18, 0x15	; 21
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ac 01       	movw	r20, r24
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write+0xbe>
     274:	44 0f       	add	r20, r20
     276:	55 1f       	adc	r21, r21
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write+0xba>
     27c:	ba 01       	movw	r22, r20
     27e:	60 95       	com	r22
     280:	62 23       	and	r22, r18
     282:	65 bb       	out	0x15, r22	; 21
     284:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     286:	41 30       	cpi	r20, 0x01	; 1
     288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     28a:	22 b3       	in	r18, 0x12	; 18
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	ac 01       	movw	r20, r24
     292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_write+0xde>
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	6a 95       	dec	r22
     29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_write+0xda>
     29c:	ba 01       	movw	r22, r20
     29e:	62 2b       	or	r22, r18
     2a0:	62 bb       	out	0x12, r22	; 18
     2a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     2a4:	22 b3       	in	r18, 0x12	; 18
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	ac 01       	movw	r20, r24
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_write+0xf8>
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_write+0xf4>
     2b6:	ba 01       	movw	r22, r20
     2b8:	60 95       	com	r22
     2ba:	62 23       	and	r22, r18
     2bc:	62 bb       	out	0x12, r22	; 18
     2be:	08 95       	ret

000002c0 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     2c0:	82 34       	cpi	r24, 0x42	; 66
     2c2:	f1 f0       	breq	.+60     	; 0x300 <DIO_u8read+0x40>
     2c4:	83 34       	cpi	r24, 0x43	; 67
     2c6:	20 f4       	brcc	.+8      	; 0x2d0 <DIO_u8read+0x10>
     2c8:	81 34       	cpi	r24, 0x41	; 65
     2ca:	09 f0       	breq	.+2      	; 0x2ce <DIO_u8read+0xe>
     2cc:	4f c0       	rjmp	.+158    	; 0x36c <DIO_u8read+0xac>
     2ce:	06 c0       	rjmp	.+12     	; 0x2dc <DIO_u8read+0x1c>
     2d0:	83 34       	cpi	r24, 0x43	; 67
     2d2:	41 f1       	breq	.+80     	; 0x324 <DIO_u8read+0x64>
     2d4:	84 34       	cpi	r24, 0x44	; 68
     2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_u8read+0x1a>
     2d8:	49 c0       	rjmp	.+146    	; 0x36c <DIO_u8read+0xac>
     2da:	36 c0       	rjmp	.+108    	; 0x348 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     2dc:	29 b3       	in	r18, 0x19	; 25
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	06 2e       	mov	r0, r22
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8read+0x2a>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8read+0x26>
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	82 23       	and	r24, r18
     2f2:	93 23       	and	r25, r19
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8read+0x3a>
     2f6:	95 95       	asr	r25
     2f8:	87 95       	ror	r24
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8read+0x36>
		break;
     2fe:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     300:	26 b3       	in	r18, 0x16	; 22
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	06 2e       	mov	r0, r22
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8read+0x4e>
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	0a 94       	dec	r0
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8read+0x4a>
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	82 23       	and	r24, r18
     316:	93 23       	and	r25, r19
     318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8read+0x5e>
     31a:	95 95       	asr	r25
     31c:	87 95       	ror	r24
     31e:	6a 95       	dec	r22
     320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_u8read+0x5a>
		break;
     322:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     324:	23 b3       	in	r18, 0x13	; 19
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	06 2e       	mov	r0, r22
     32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_u8read+0x72>
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	0a 94       	dec	r0
     334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_u8read+0x6e>
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	82 23       	and	r24, r18
     33a:	93 23       	and	r25, r19
     33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_u8read+0x82>
     33e:	95 95       	asr	r25
     340:	87 95       	ror	r24
     342:	6a 95       	dec	r22
     344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_u8read+0x7e>
		break;
     346:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     348:	20 b3       	in	r18, 0x10	; 16
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	06 2e       	mov	r0, r22
     350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8read+0x96>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	0a 94       	dec	r0
     358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8read+0x92>
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	82 23       	and	r24, r18
     35e:	93 23       	and	r25, r19
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_u8read+0xa6>
     362:	95 95       	asr	r25
     364:	87 95       	ror	r24
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_u8read+0xa2>
		break;
     36a:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     36c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
     36e:	08 95       	ret

00000370 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     370:	82 34       	cpi	r24, 0x42	; 66
     372:	b9 f0       	breq	.+46     	; 0x3a2 <DIO_toggle+0x32>
     374:	83 34       	cpi	r24, 0x43	; 67
     376:	18 f4       	brcc	.+6      	; 0x37e <DIO_toggle+0xe>
     378:	81 34       	cpi	r24, 0x41	; 65
     37a:	c9 f5       	brne	.+114    	; 0x3ee <DIO_toggle+0x7e>
     37c:	05 c0       	rjmp	.+10     	; 0x388 <DIO_toggle+0x18>
     37e:	83 34       	cpi	r24, 0x43	; 67
     380:	e9 f0       	breq	.+58     	; 0x3bc <DIO_toggle+0x4c>
     382:	84 34       	cpi	r24, 0x44	; 68
     384:	a1 f5       	brne	.+104    	; 0x3ee <DIO_toggle+0x7e>
     386:	27 c0       	rjmp	.+78     	; 0x3d6 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     388:	2b b3       	in	r18, 0x1b	; 27
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	ac 01       	movw	r20, r24
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_toggle+0x26>
     392:	44 0f       	add	r20, r20
     394:	55 1f       	adc	r21, r21
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_toggle+0x22>
     39a:	ba 01       	movw	r22, r20
     39c:	62 27       	eor	r22, r18
     39e:	6b bb       	out	0x1b, r22	; 27
		break;
     3a0:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     3a2:	28 b3       	in	r18, 0x18	; 24
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	ac 01       	movw	r20, r24
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_toggle+0x40>
     3ac:	44 0f       	add	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_toggle+0x3c>
     3b4:	ba 01       	movw	r22, r20
     3b6:	62 27       	eor	r22, r18
     3b8:	68 bb       	out	0x18, r22	; 24
		break;
     3ba:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     3bc:	25 b3       	in	r18, 0x15	; 21
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	ac 01       	movw	r20, r24
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_toggle+0x5a>
     3c6:	44 0f       	add	r20, r20
     3c8:	55 1f       	adc	r21, r21
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_toggle+0x56>
     3ce:	ba 01       	movw	r22, r20
     3d0:	62 27       	eor	r22, r18
     3d2:	65 bb       	out	0x15, r22	; 21
		break;
     3d4:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     3d6:	22 b3       	in	r18, 0x12	; 18
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	ac 01       	movw	r20, r24
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_toggle+0x74>
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_toggle+0x70>
     3e8:	ba 01       	movw	r22, r20
     3ea:	62 27       	eor	r22, r18
     3ec:	62 bb       	out	0x12, r22	; 18
     3ee:	08 95       	ret

000003f0 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     3f0:	82 34       	cpi	r24, 0x42	; 66
     3f2:	61 f0       	breq	.+24     	; 0x40c <DIO_set_port_direction+0x1c>
     3f4:	83 34       	cpi	r24, 0x43	; 67
     3f6:	18 f4       	brcc	.+6      	; 0x3fe <DIO_set_port_direction+0xe>
     3f8:	81 34       	cpi	r24, 0x41	; 65
     3fa:	69 f4       	brne	.+26     	; 0x416 <DIO_set_port_direction+0x26>
     3fc:	05 c0       	rjmp	.+10     	; 0x408 <DIO_set_port_direction+0x18>
     3fe:	83 34       	cpi	r24, 0x43	; 67
     400:	39 f0       	breq	.+14     	; 0x410 <DIO_set_port_direction+0x20>
     402:	84 34       	cpi	r24, 0x44	; 68
     404:	41 f4       	brne	.+16     	; 0x416 <DIO_set_port_direction+0x26>
     406:	06 c0       	rjmp	.+12     	; 0x414 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     408:	6a bb       	out	0x1a, r22	; 26
		break ;
     40a:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     40c:	67 bb       	out	0x17, r22	; 23
		break ;
     40e:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     410:	64 bb       	out	0x14, r22	; 20
		break ;
     412:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     414:	61 bb       	out	0x11, r22	; 17
     416:	08 95       	ret

00000418 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     418:	82 34       	cpi	r24, 0x42	; 66
     41a:	61 f0       	breq	.+24     	; 0x434 <DIO_write_port+0x1c>
     41c:	83 34       	cpi	r24, 0x43	; 67
     41e:	18 f4       	brcc	.+6      	; 0x426 <DIO_write_port+0xe>
     420:	81 34       	cpi	r24, 0x41	; 65
     422:	69 f4       	brne	.+26     	; 0x43e <DIO_write_port+0x26>
     424:	05 c0       	rjmp	.+10     	; 0x430 <DIO_write_port+0x18>
     426:	83 34       	cpi	r24, 0x43	; 67
     428:	39 f0       	breq	.+14     	; 0x438 <DIO_write_port+0x20>
     42a:	84 34       	cpi	r24, 0x44	; 68
     42c:	41 f4       	brne	.+16     	; 0x43e <DIO_write_port+0x26>
     42e:	06 c0       	rjmp	.+12     	; 0x43c <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     430:	6b bb       	out	0x1b, r22	; 27
		break ;
     432:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     434:	68 bb       	out	0x18, r22	; 24
		break ;
     436:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     438:	65 bb       	out	0x15, r22	; 21
		break ;
     43a:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     43c:	62 bb       	out	0x12, r22	; 18
     43e:	08 95       	ret

00000440 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     440:	82 34       	cpi	r24, 0x42	; 66
     442:	61 f0       	breq	.+24     	; 0x45c <DIO_read_port+0x1c>
     444:	83 34       	cpi	r24, 0x43	; 67
     446:	18 f4       	brcc	.+6      	; 0x44e <DIO_read_port+0xe>
     448:	81 34       	cpi	r24, 0x41	; 65
     44a:	71 f4       	brne	.+28     	; 0x468 <__stack+0x9>
     44c:	05 c0       	rjmp	.+10     	; 0x458 <DIO_read_port+0x18>
     44e:	83 34       	cpi	r24, 0x43	; 67
     450:	39 f0       	breq	.+14     	; 0x460 <__stack+0x1>
     452:	84 34       	cpi	r24, 0x44	; 68
     454:	49 f4       	brne	.+18     	; 0x468 <__stack+0x9>
     456:	06 c0       	rjmp	.+12     	; 0x464 <__stack+0x5>
	{
		case 'A' :
		return_val=PINA; // read the value of port A
     458:	89 b3       	in	r24, 0x19	; 25
		break ;
     45a:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B
     45c:	86 b3       	in	r24, 0x16	; 22
		break ;
     45e:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C
     460:	83 b3       	in	r24, 0x13	; 19
		break ;
     462:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D
     464:	80 b3       	in	r24, 0x10	; 16
		break ;
     466:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     468:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     46a:	08 95       	ret

0000046c <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     46c:	82 34       	cpi	r24, 0x42	; 66
     46e:	51 f1       	breq	.+84     	; 0x4c4 <DIO_vconnectpullup+0x58>
     470:	83 34       	cpi	r24, 0x43	; 67
     472:	20 f4       	brcc	.+8      	; 0x47c <DIO_vconnectpullup+0x10>
     474:	81 34       	cpi	r24, 0x41	; 65
     476:	09 f0       	breq	.+2      	; 0x47a <DIO_vconnectpullup+0xe>
     478:	7b c0       	rjmp	.+246    	; 0x570 <DIO_vconnectpullup+0x104>
     47a:	07 c0       	rjmp	.+14     	; 0x48a <DIO_vconnectpullup+0x1e>
     47c:	83 34       	cpi	r24, 0x43	; 67
     47e:	09 f4       	brne	.+2      	; 0x482 <DIO_vconnectpullup+0x16>
     480:	3e c0       	rjmp	.+124    	; 0x4fe <DIO_vconnectpullup+0x92>
     482:	84 34       	cpi	r24, 0x44	; 68
     484:	09 f0       	breq	.+2      	; 0x488 <DIO_vconnectpullup+0x1c>
     486:	74 c0       	rjmp	.+232    	; 0x570 <DIO_vconnectpullup+0x104>
     488:	57 c0       	rjmp	.+174    	; 0x538 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     48a:	41 30       	cpi	r20, 0x01	; 1
     48c:	69 f4       	brne	.+26     	; 0x4a8 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     48e:	2b b3       	in	r18, 0x1b	; 27
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	ac 01       	movw	r20, r24
     496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_vconnectpullup+0x30>
     498:	44 0f       	add	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_vconnectpullup+0x2c>
     4a0:	ba 01       	movw	r22, r20
     4a2:	62 2b       	or	r22, r18
     4a4:	6b bb       	out	0x1b, r22	; 27
     4a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     4a8:	2b b3       	in	r18, 0x1b	; 27
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	ac 01       	movw	r20, r24
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_vconnectpullup+0x4a>
     4b2:	44 0f       	add	r20, r20
     4b4:	55 1f       	adc	r21, r21
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_vconnectpullup+0x46>
     4ba:	ba 01       	movw	r22, r20
     4bc:	60 95       	com	r22
     4be:	62 23       	and	r22, r18
     4c0:	6b bb       	out	0x1b, r22	; 27
     4c2:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     4c4:	41 30       	cpi	r20, 0x01	; 1
     4c6:	69 f4       	brne	.+26     	; 0x4e2 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
     4c8:	28 b3       	in	r18, 0x18	; 24
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	ac 01       	movw	r20, r24
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_vconnectpullup+0x6a>
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_vconnectpullup+0x66>
     4da:	ba 01       	movw	r22, r20
     4dc:	62 2b       	or	r22, r18
     4de:	68 bb       	out	0x18, r22	; 24
     4e0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     4e2:	28 b3       	in	r18, 0x18	; 24
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	ac 01       	movw	r20, r24
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_vconnectpullup+0x84>
     4ec:	44 0f       	add	r20, r20
     4ee:	55 1f       	adc	r21, r21
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_vconnectpullup+0x80>
     4f4:	ba 01       	movw	r22, r20
     4f6:	60 95       	com	r22
     4f8:	62 23       	and	r22, r18
     4fa:	68 bb       	out	0x18, r22	; 24
     4fc:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     4fe:	41 30       	cpi	r20, 0x01	; 1
     500:	69 f4       	brne	.+26     	; 0x51c <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
     502:	25 b3       	in	r18, 0x15	; 21
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ac 01       	movw	r20, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_vconnectpullup+0xa4>
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	6a 95       	dec	r22
     512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_vconnectpullup+0xa0>
     514:	ba 01       	movw	r22, r20
     516:	62 2b       	or	r22, r18
     518:	65 bb       	out	0x15, r22	; 21
     51a:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     51c:	25 b3       	in	r18, 0x15	; 21
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	ac 01       	movw	r20, r24
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_vconnectpullup+0xbe>
     526:	44 0f       	add	r20, r20
     528:	55 1f       	adc	r21, r21
     52a:	6a 95       	dec	r22
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_vconnectpullup+0xba>
     52e:	ba 01       	movw	r22, r20
     530:	60 95       	com	r22
     532:	62 23       	and	r22, r18
     534:	65 bb       	out	0x15, r22	; 21
     536:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     538:	41 30       	cpi	r20, 0x01	; 1
     53a:	69 f4       	brne	.+26     	; 0x556 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
     53c:	22 b3       	in	r18, 0x12	; 18
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	ac 01       	movw	r20, r24
     544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_vconnectpullup+0xde>
     546:	44 0f       	add	r20, r20
     548:	55 1f       	adc	r21, r21
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_vconnectpullup+0xda>
     54e:	ba 01       	movw	r22, r20
     550:	62 2b       	or	r22, r18
     552:	62 bb       	out	0x12, r22	; 18
     554:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     556:	22 b3       	in	r18, 0x12	; 18
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	ac 01       	movw	r20, r24
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_vconnectpullup+0xf8>
     560:	44 0f       	add	r20, r20
     562:	55 1f       	adc	r21, r21
     564:	6a 95       	dec	r22
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_vconnectpullup+0xf4>
     568:	ba 01       	movw	r22, r20
     56a:	60 95       	com	r22
     56c:	62 23       	and	r22, r18
     56e:	62 bb       	out	0x12, r22	; 18
     570:	08 95       	ret

00000572 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     572:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     574:	82 34       	cpi	r24, 0x42	; 66
     576:	81 f0       	breq	.+32     	; 0x598 <write_low_nibble+0x26>
     578:	83 34       	cpi	r24, 0x43	; 67
     57a:	18 f4       	brcc	.+6      	; 0x582 <write_low_nibble+0x10>
     57c:	81 34       	cpi	r24, 0x41	; 65
     57e:	f1 f4       	brne	.+60     	; 0x5bc <write_low_nibble+0x4a>
     580:	05 c0       	rjmp	.+10     	; 0x58c <write_low_nibble+0x1a>
     582:	83 34       	cpi	r24, 0x43	; 67
     584:	79 f0       	breq	.+30     	; 0x5a4 <write_low_nibble+0x32>
     586:	84 34       	cpi	r24, 0x44	; 68
     588:	c9 f4       	brne	.+50     	; 0x5bc <write_low_nibble+0x4a>
     58a:	12 c0       	rjmp	.+36     	; 0x5b0 <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     58c:	8b b3       	in	r24, 0x1b	; 27
     58e:	80 7f       	andi	r24, 0xF0	; 240
     590:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     592:	8b b3       	in	r24, 0x1b	; 27
     594:	86 2b       	or	r24, r22
     596:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     598:	88 b3       	in	r24, 0x18	; 24
     59a:	80 7f       	andi	r24, 0xF0	; 240
     59c:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     59e:	88 b3       	in	r24, 0x18	; 24
     5a0:	86 2b       	or	r24, r22
     5a2:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     5a4:	85 b3       	in	r24, 0x15	; 21
     5a6:	80 7f       	andi	r24, 0xF0	; 240
     5a8:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5aa:	85 b3       	in	r24, 0x15	; 21
     5ac:	86 2b       	or	r24, r22
     5ae:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     5b0:	82 b3       	in	r24, 0x12	; 18
     5b2:	80 7f       	andi	r24, 0xF0	; 240
     5b4:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     5b6:	82 b3       	in	r24, 0x12	; 18
     5b8:	68 2b       	or	r22, r24
     5ba:	62 bb       	out	0x12, r22	; 18
     5bc:	08 95       	ret

000005be <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     5be:	62 95       	swap	r22
     5c0:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     5c2:	82 34       	cpi	r24, 0x42	; 66
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <write_high_nibble+0x28>
     5c6:	83 34       	cpi	r24, 0x43	; 67
     5c8:	18 f4       	brcc	.+6      	; 0x5d0 <write_high_nibble+0x12>
     5ca:	81 34       	cpi	r24, 0x41	; 65
     5cc:	f1 f4       	brne	.+60     	; 0x60a <write_high_nibble+0x4c>
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <write_high_nibble+0x1c>
     5d0:	83 34       	cpi	r24, 0x43	; 67
     5d2:	79 f0       	breq	.+30     	; 0x5f2 <write_high_nibble+0x34>
     5d4:	84 34       	cpi	r24, 0x44	; 68
     5d6:	c9 f4       	brne	.+50     	; 0x60a <write_high_nibble+0x4c>
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     5da:	8b b3       	in	r24, 0x1b	; 27
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     5e0:	8b b3       	in	r24, 0x1b	; 27
     5e2:	86 2b       	or	r24, r22
     5e4:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     5e6:	88 b3       	in	r24, 0x18	; 24
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5ec:	88 b3       	in	r24, 0x18	; 24
     5ee:	86 2b       	or	r24, r22
     5f0:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     5f2:	85 b3       	in	r24, 0x15	; 21
     5f4:	8f 70       	andi	r24, 0x0F	; 15
     5f6:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5f8:	85 b3       	in	r24, 0x15	; 21
     5fa:	86 2b       	or	r24, r22
     5fc:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     5fe:	82 b3       	in	r24, 0x12	; 18
     600:	8f 70       	andi	r24, 0x0F	; 15
     602:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     604:	82 b3       	in	r24, 0x12	; 18
     606:	68 2b       	or	r22, r24
     608:	62 bb       	out	0x12, r22	; 18
     60a:	08 95       	ret

0000060c <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
     60c:	82 e4       	ldi	r24, 0x42	; 66
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     616:	8f e9       	ldi	r24, 0x9F	; 159
     618:	9f e0       	ldi	r25, 0x0F	; 15
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <send_falling_edge+0xe>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <send_falling_edge+0x14>
     620:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
     622:	82 e4       	ldi	r24, 0x42	; 66
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
     62c:	8f e9       	ldi	r24, 0x9F	; 159
     62e:	9f e0       	ldi	r25, 0x0F	; 15
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <send_falling_edge+0x24>
     634:	00 c0       	rjmp	.+0      	; 0x636 <send_falling_edge+0x2a>
     636:	00 00       	nop
	_delay_ms(2);
}
     638:	08 95       	ret

0000063a <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
     63a:	cf 93       	push	r28
     63c:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',cmd>>4);
     63e:	68 2f       	mov	r22, r24
     640:	62 95       	swap	r22
     642:	6f 70       	andi	r22, 0x0F	; 15
     644:	84 e4       	ldi	r24, 0x44	; 68
     646:	0e 94 df 02 	call	0x5be	; 0x5be <write_high_nibble>
	DIO_write('B',RS,0);
     64a:	82 e4       	ldi	r24, 0x42	; 66
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	send_falling_edge();
     654:	0e 94 06 03 	call	0x60c	; 0x60c <send_falling_edge>
	write_high_nibble('D',cmd);
     658:	84 e4       	ldi	r24, 0x44	; 68
     65a:	6c 2f       	mov	r22, r28
     65c:	0e 94 df 02 	call	0x5be	; 0x5be <write_high_nibble>
	DIO_write('B',RS,0);
     660:	82 e4       	ldi	r24, 0x42	; 66
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	send_falling_edge();
     66a:	0e 94 06 03 	call	0x60c	; 0x60c <send_falling_edge>
     66e:	8f ec       	ldi	r24, 0xCF	; 207
     670:	97 e0       	ldi	r25, 0x07	; 7
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <LCD_vSend_cmd+0x38>
     676:	00 c0       	rjmp	.+0      	; 0x678 <LCD_vSend_cmd+0x3e>
     678:	00 00       	nop
	#endif
	_delay_ms(1);
}
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <LCD_vInit>:
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	91 ee       	ldi	r25, 0xE1	; 225
     682:	a4 e0       	ldi	r26, 0x04	; 4
     684:	81 50       	subi	r24, 0x01	; 1
     686:	90 40       	sbci	r25, 0x00	; 0
     688:	a0 40       	sbci	r26, 0x00	; 0
     68a:	e1 f7       	brne	.-8      	; 0x684 <LCD_vInit+0x6>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_vInit+0x10>
     68e:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('D',4,1);
     690:	84 e4       	ldi	r24, 0x44	; 68
     692:	64 e0       	ldi	r22, 0x04	; 4
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',5,1);
     69a:	84 e4       	ldi	r24, 0x44	; 68
     69c:	65 e0       	ldi	r22, 0x05	; 5
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,1);
     6a4:	84 e4       	ldi	r24, 0x44	; 68
     6a6:	66 e0       	ldi	r22, 0x06	; 6
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
     6ae:	84 e4       	ldi	r24, 0x44	; 68
     6b0:	67 e0       	ldi	r22, 0x07	; 7
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
     6b8:	82 e4       	ldi	r24, 0x42	; 66
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
     6c2:	82 e4       	ldi	r24, 0x42	; 66
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
     6cc:	82 e4       	ldi	r24, 0x42	; 66
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
     6d6:	82 e4       	ldi	r24, 0x42	; 66
     6d8:	62 e0       	ldi	r22, 0x02	; 2
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     6e6:	af e1       	ldi	r26, 0x1F	; 31
     6e8:	be e4       	ldi	r27, 0x4E	; 78
     6ea:	11 97       	sbiw	r26, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_vInit+0x6c>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_vInit+0x72>
     6f0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
     6f2:	88 e2       	ldi	r24, 0x28	; 40
     6f4:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     6f8:	8f ec       	ldi	r24, 0xCF	; 207
     6fa:	97 e0       	ldi	r25, 0x07	; 7
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_vInit+0x7e>
     700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_vInit+0x84>
     702:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     70a:	af ec       	ldi	r26, 0xCF	; 207
     70c:	b7 e0       	ldi	r27, 0x07	; 7
     70e:	11 97       	sbiw	r26, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <LCD_vInit+0x90>
     712:	00 c0       	rjmp	.+0      	; 0x714 <LCD_vInit+0x96>
     714:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     71c:	8f e1       	ldi	r24, 0x1F	; 31
     71e:	9e e4       	ldi	r25, 0x4E	; 78
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <LCD_vInit+0xa2>
     724:	00 c0       	rjmp	.+0      	; 0x726 <LCD_vInit+0xa8>
     726:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     728:	86 e0       	ldi	r24, 0x06	; 6
     72a:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     72e:	af ec       	ldi	r26, 0xCF	; 207
     730:	b7 e0       	ldi	r27, 0x07	; 7
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <LCD_vInit+0xb4>
     736:	00 c0       	rjmp	.+0      	; 0x738 <LCD_vInit+0xba>
     738:	00 00       	nop
	_delay_ms(1);
	#endif
}
     73a:	08 95       	ret

0000073c <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
     73c:	cf 93       	push	r28
     73e:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',data>>4);
     740:	68 2f       	mov	r22, r24
     742:	62 95       	swap	r22
     744:	6f 70       	andi	r22, 0x0F	; 15
     746:	84 e4       	ldi	r24, 0x44	; 68
     748:	0e 94 df 02 	call	0x5be	; 0x5be <write_high_nibble>
	DIO_write('B',RS,1);
     74c:	82 e4       	ldi	r24, 0x42	; 66
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	send_falling_edge();
     756:	0e 94 06 03 	call	0x60c	; 0x60c <send_falling_edge>
	write_high_nibble('D',data);
     75a:	84 e4       	ldi	r24, 0x44	; 68
     75c:	6c 2f       	mov	r22, r28
     75e:	0e 94 df 02 	call	0x5be	; 0x5be <write_high_nibble>
	DIO_write('B',RS,1);
     762:	82 e4       	ldi	r24, 0x42	; 66
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_write>
	send_falling_edge();
     76c:	0e 94 06 03 	call	0x60c	; 0x60c <send_falling_edge>
     770:	8f ec       	ldi	r24, 0xCF	; 207
     772:	97 e0       	ldi	r25, 0x07	; 7
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <LCD_vSend_char+0x38>
     778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_vSend_char+0x3e>
     77a:	00 00       	nop
	#endif
	_delay_ms(1);
}
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     786:	88 81       	ld	r24, Y
     788:	88 23       	and	r24, r24
     78a:	31 f0       	breq	.+12     	; 0x798 <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
     78c:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     78e:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     792:	89 91       	ld	r24, Y+
     794:	88 23       	and	r24, r24
     796:	d9 f7       	brne	.-10     	; 0x78e <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     7a4:	8f e1       	ldi	r24, 0x1F	; 31
     7a6:	9e e4       	ldi	r25, 0x4E	; 78
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_clearscreen+0xa>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_clearscreen+0x10>
     7ae:	00 00       	nop
	_delay_ms(10);
}
     7b0:	08 95       	ret

000007b2 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     7b2:	28 2f       	mov	r18, r24
     7b4:	21 50       	subi	r18, 0x01	; 1
     7b6:	22 30       	cpi	r18, 0x02	; 2
     7b8:	70 f4       	brcc	.+28     	; 0x7d6 <LCD_movecursor+0x24>
     7ba:	61 31       	cpi	r22, 0x11	; 17
     7bc:	70 f4       	brcc	.+28     	; 0x7da <LCD_movecursor+0x28>
     7be:	66 23       	and	r22, r22
     7c0:	71 f0       	breq	.+28     	; 0x7de <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	19 f4       	brne	.+6      	; 0x7cc <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     7c6:	96 2f       	mov	r25, r22
     7c8:	91 58       	subi	r25, 0x81	; 129
     7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <LCD_movecursor+0x2e>
	}
	else if (row==2)
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     7d0:	96 2f       	mov	r25, r22
     7d2:	91 54       	subi	r25, 0x41	; 65
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     7d6:	90 e8       	ldi	r25, 0x80	; 128
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <LCD_movecursor+0x2e>
     7da:	90 e8       	ldi	r25, 0x80	; 128
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <LCD_movecursor+0x2e>
     7de:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     7e0:	89 2f       	mov	r24, r25
     7e2:	0e 94 1d 03 	call	0x63a	; 0x63a <LCD_vSend_cmd>
     7e6:	8f ec       	ldi	r24, 0xCF	; 207
     7e8:	97 e0       	ldi	r25, 0x07	; 7
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <LCD_movecursor+0x38>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <LCD_movecursor+0x3e>
     7f0:	00 00       	nop
	_delay_ms(1);
}
     7f2:	08 95       	ret

000007f4 <main>:
int main(void)
{
	long result;
	float v=0 ;
	float vcc = 5 ;
	DDRC=0xff;
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	84 bb       	out	0x14, r24	; 20
	ADC_vinit();
     7f8:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	LCD_vInit();
     7fc:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_vInit>
	LCD_vSend_string("Digital ohmmeter");
     800:	80 e6       	ldi	r24, 0x60	; 96
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_vSend_string>
	LCD_movecursor(2,1);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
	LCD_vSend_string("R=");
     810:	81 e7       	ldi	r24, 0x71	; 113
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_vSend_string>
			LCD_vSend_char((result/1000000) + 48);
			LCD_vSend_char((result%1000000)/100000 + 48);
			LCD_vSend_char((((result%1000000)%100000)/10000) + 48);
			LCD_vSend_char(((((result%1000000)%100000)%10000)/1000) + 48);
			LCD_vSend_char((((((result%1000000)%100000)%10000)%1000)/100) + 48);
			LCD_vSend_char(((((((result%1000000)%100000)%10000)%1000)%100)/10) + 48);
     818:	0f 2e       	mov	r0, r31
     81a:	fa e0       	ldi	r31, 0x0A	; 10
     81c:	4f 2e       	mov	r4, r31
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	5f 2e       	mov	r5, r31
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	6f 2e       	mov	r6, r31
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	7f 2e       	mov	r7, r31
     82a:	f0 2d       	mov	r31, r0
	LCD_vSend_string("Digital ohmmeter");
	LCD_movecursor(2,1);
	LCD_vSend_string("R=");
	while(1)
	{
		v =((float)(ADC_u16Read()))*0.00488; // 0.00488=(5-0)/1024
     82c:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16Read>
     830:	bc 01       	movw	r22, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 5e 07 	call	0xebc	; 0xebc <__floatunsisf>
     83a:	28 e6       	ldi	r18, 0x68	; 104
     83c:	38 ee       	ldi	r19, 0xE8	; 232
     83e:	4f e9       	ldi	r20, 0x9F	; 159
     840:	5b e3       	ldi	r21, 0x3B	; 59
     842:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
     846:	d6 2f       	mov	r29, r22
     848:	c7 2f       	mov	r28, r23
     84a:	08 2f       	mov	r16, r24
     84c:	c9 2e       	mov	r12, r25
		result=(v*10000)/(5-v);
     84e:	86 2f       	mov	r24, r22
     850:	9c 2f       	mov	r25, r28
     852:	a0 2f       	mov	r26, r16
     854:	bc 2d       	mov	r27, r12
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e4       	ldi	r19, 0x40	; 64
     85e:	4c e1       	ldi	r20, 0x1C	; 28
     860:	56 e4       	ldi	r21, 0x46	; 70
     862:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
     866:	4b 01       	movw	r8, r22
     868:	5c 01       	movw	r10, r24
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 ea       	ldi	r24, 0xA0	; 160
     870:	90 e4       	ldi	r25, 0x40	; 64
     872:	50 2f       	mov	r21, r16
     874:	0d 2f       	mov	r16, r29
     876:	1c 2f       	mov	r17, r28
     878:	25 2f       	mov	r18, r21
     87a:	3c 2d       	mov	r19, r12
     87c:	a9 01       	movw	r20, r18
     87e:	98 01       	movw	r18, r16
     880:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__subsf3>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c5 01       	movw	r24, r10
     88a:	b4 01       	movw	r22, r8
     88c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     890:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fixsfsi>
     894:	c6 2e       	mov	r12, r22
     896:	d7 2e       	mov	r13, r23
     898:	e8 2e       	mov	r14, r24
     89a:	f9 2e       	mov	r15, r25
		if(result<10) // from 0 to 9 Ohm
     89c:	8a e0       	ldi	r24, 0x0A	; 10
     89e:	c8 16       	cp	r12, r24
     8a0:	d1 04       	cpc	r13, r1
     8a2:	e1 04       	cpc	r14, r1
     8a4:	f1 04       	cpc	r15, r1
     8a6:	c4 f4       	brge	.+48     	; 0x8d8 <main+0xe4>
		{
			LCD_movecursor(2,4);
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result) + 48);
     8b0:	8c 2d       	mov	r24, r12
     8b2:	80 5d       	subi	r24, 0xD0	; 208
     8b4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     8b8:	8e e2       	ldi	r24, 0x2E	; 46
     8ba:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     8be:	80 e3       	ldi	r24, 0x30	; 48
     8c0:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     8c4:	80 e3       	ldi	r24, 0x30	; 48
     8c6:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     8ca:	80 e2       	ldi	r24, 0x20	; 32
     8cc:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     8d0:	84 ef       	ldi	r24, 0xF4	; 244
     8d2:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     8d6:	aa cf       	rjmp	.-172    	; 0x82c <main+0x38>
			
		}
		else if(result<100) // from 10 to 99 Ohm
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	c8 16       	cp	r12, r24
     8dc:	d1 04       	cpc	r13, r1
     8de:	e1 04       	cpc	r14, r1
     8e0:	f1 04       	cpc	r15, r1
     8e2:	1c f5       	brge	.+70     	; 0x92a <main+0x136>
		{
			LCD_movecursor(2,4);
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	64 e0       	ldi	r22, 0x04	; 4
     8e8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result)/10 + 48);
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     8f8:	c6 2f       	mov	r28, r22
     8fa:	82 2f       	mov	r24, r18
     8fc:	80 5d       	subi	r24, 0xD0	; 208
     8fe:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result)%10 + 48);
     902:	8c 2f       	mov	r24, r28
     904:	80 5d       	subi	r24, 0xD0	; 208
     906:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     90a:	8e e2       	ldi	r24, 0x2E	; 46
     90c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     910:	80 e3       	ldi	r24, 0x30	; 48
     912:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     916:	80 e3       	ldi	r24, 0x30	; 48
     918:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     91c:	80 e2       	ldi	r24, 0x20	; 32
     91e:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     922:	84 ef       	ldi	r24, 0xF4	; 244
     924:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     928:	81 cf       	rjmp	.-254    	; 0x82c <main+0x38>
			
		}
		else if(result<1000) // from 100 to 1K Ohm
     92a:	88 ee       	ldi	r24, 0xE8	; 232
     92c:	c8 16       	cp	r12, r24
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	d8 06       	cpc	r13, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	e8 06       	cpc	r14, r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	f8 06       	cpc	r15, r24
     93a:	b4 f5       	brge	.+108    	; 0x9a8 <main+0x1b4>
		{
			LCD_movecursor(2,4);
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	64 e0       	ldi	r22, 0x04	; 4
     940:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result)/100 + 48);
     944:	c7 01       	movw	r24, r14
     946:	b6 01       	movw	r22, r12
     948:	24 e6       	ldi	r18, 0x64	; 100
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     954:	4b 01       	movw	r8, r22
     956:	5c 01       	movw	r10, r24
     958:	82 2f       	mov	r24, r18
     95a:	80 5d       	subi	r24, 0xD0	; 208
     95c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(((result)%100)/10 + 48);
     960:	c5 01       	movw	r24, r10
     962:	b4 01       	movw	r22, r8
     964:	a3 01       	movw	r20, r6
     966:	92 01       	movw	r18, r4
     968:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     96c:	82 2f       	mov	r24, r18
     96e:	80 5d       	subi	r24, 0xD0	; 208
     970:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result)%10 + 48);
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	a3 01       	movw	r20, r6
     97a:	92 01       	movw	r18, r4
     97c:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     980:	86 2f       	mov	r24, r22
     982:	80 5d       	subi	r24, 0xD0	; 208
     984:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     988:	8e e2       	ldi	r24, 0x2E	; 46
     98a:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     98e:	80 e3       	ldi	r24, 0x30	; 48
     990:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     994:	80 e3       	ldi	r24, 0x30	; 48
     996:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     9a0:	84 ef       	ldi	r24, 0xF4	; 244
     9a2:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     9a6:	42 cf       	rjmp	.-380    	; 0x82c <main+0x38>
			
		}
		else if(result<10000) // from 1K to 9K  Ohm
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	c8 16       	cp	r12, r24
     9ac:	87 e2       	ldi	r24, 0x27	; 39
     9ae:	d8 06       	cpc	r13, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	e8 06       	cpc	r14, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	f8 06       	cpc	r15, r24
     9b8:	0c f0       	brlt	.+2      	; 0x9bc <main+0x1c8>
     9ba:	44 c0       	rjmp	.+136    	; 0xa44 <main+0x250>
	    {		
		LCD_movecursor(2,4);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	64 e0       	ldi	r22, 0x04	; 4
     9c0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
		LCD_vSend_char((result/1000) + 48);
     9c4:	c7 01       	movw	r24, r14
     9c6:	b6 01       	movw	r22, r12
     9c8:	28 ee       	ldi	r18, 0xE8	; 232
     9ca:	33 e0       	ldi	r19, 0x03	; 3
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     9d4:	4b 01       	movw	r8, r22
     9d6:	5c 01       	movw	r10, r24
     9d8:	82 2f       	mov	r24, r18
     9da:	80 5d       	subi	r24, 0xD0	; 208
     9dc:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char((result%1000)/100 + 48);
     9e0:	c5 01       	movw	r24, r10
     9e2:	b4 01       	movw	r22, r8
     9e4:	24 e6       	ldi	r18, 0x64	; 100
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     9f0:	4b 01       	movw	r8, r22
     9f2:	5c 01       	movw	r10, r24
     9f4:	82 2f       	mov	r24, r18
     9f6:	80 5d       	subi	r24, 0xD0	; 208
     9f8:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char((((result%1000)%100)/10) + 48);
     9fc:	c5 01       	movw	r24, r10
     9fe:	b4 01       	movw	r22, r8
     a00:	a3 01       	movw	r20, r6
     a02:	92 01       	movw	r18, r4
     a04:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     a08:	82 2f       	mov	r24, r18
     a0a:	80 5d       	subi	r24, 0xD0	; 208
     a0c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char((result)%10 + 48);
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	a3 01       	movw	r20, r6
     a16:	92 01       	movw	r18, r4
     a18:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     a1c:	86 2f       	mov	r24, r22
     a1e:	80 5d       	subi	r24, 0xD0	; 208
     a20:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char(46);
     a24:	8e e2       	ldi	r24, 0x2E	; 46
     a26:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char('0');
     a2a:	80 e3       	ldi	r24, 0x30	; 48
     a2c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char('0');
     a30:	80 e3       	ldi	r24, 0x30	; 48
     a32:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char(' ');
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
		LCD_vSend_char(244);
     a3c:	84 ef       	ldi	r24, 0xF4	; 244
     a3e:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     a42:	f4 ce       	rjmp	.-536    	; 0x82c <main+0x38>
		
		}	
		else if(result<100000) // from 10K to 99K Ohm
     a44:	80 ea       	ldi	r24, 0xA0	; 160
     a46:	c8 16       	cp	r12, r24
     a48:	86 e8       	ldi	r24, 0x86	; 134
     a4a:	d8 06       	cpc	r13, r24
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	e8 06       	cpc	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	0c f0       	brlt	.+2      	; 0xa58 <main+0x264>
     a56:	52 c0       	rjmp	.+164    	; 0xafc <main+0x308>
		{
			LCD_movecursor(2,4);
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	64 e0       	ldi	r22, 0x04	; 4
     a5c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result/10000) + 48);
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	20 e1       	ldi	r18, 0x10	; 16
     a66:	37 e2       	ldi	r19, 0x27	; 39
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     a70:	4b 01       	movw	r8, r22
     a72:	5c 01       	movw	r10, r24
     a74:	82 2f       	mov	r24, r18
     a76:	80 5d       	subi	r24, 0xD0	; 208
     a78:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result%10000)/1000 + 48);
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	28 ee       	ldi	r18, 0xE8	; 232
     a82:	33 e0       	ldi	r19, 0x03	; 3
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     a8c:	4b 01       	movw	r8, r22
     a8e:	5c 01       	movw	r10, r24
     a90:	82 2f       	mov	r24, r18
     a92:	80 5d       	subi	r24, 0xD0	; 208
     a94:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((((result%10000)%1000)/100) + 48);
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	24 e6       	ldi	r18, 0x64	; 100
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     aa8:	4b 01       	movw	r8, r22
     aaa:	5c 01       	movw	r10, r24
     aac:	82 2f       	mov	r24, r18
     aae:	80 5d       	subi	r24, 0xD0	; 208
     ab0:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(((((result%10000)%1000)%100)/10) + 48);
     ab4:	c5 01       	movw	r24, r10
     ab6:	b4 01       	movw	r22, r8
     ab8:	a3 01       	movw	r20, r6
     aba:	92 01       	movw	r18, r4
     abc:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     ac0:	82 2f       	mov	r24, r18
     ac2:	80 5d       	subi	r24, 0xD0	; 208
     ac4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result)%10 + 48);
     ac8:	c7 01       	movw	r24, r14
     aca:	b6 01       	movw	r22, r12
     acc:	a3 01       	movw	r20, r6
     ace:	92 01       	movw	r18, r4
     ad0:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     ad4:	86 2f       	mov	r24, r22
     ad6:	80 5d       	subi	r24, 0xD0	; 208
     ad8:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     adc:	8e e2       	ldi	r24, 0x2E	; 46
     ade:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     ae2:	80 e3       	ldi	r24, 0x30	; 48
     ae4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     ae8:	80 e3       	ldi	r24, 0x30	; 48
     aea:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     af4:	84 ef       	ldi	r24, 0xF4	; 244
     af6:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     afa:	98 ce       	rjmp	.-720    	; 0x82c <main+0x38>
			
		}
		else if(result<1000000)  // from 100k to 1M Ohm
     afc:	80 e4       	ldi	r24, 0x40	; 64
     afe:	c8 16       	cp	r12, r24
     b00:	82 e4       	ldi	r24, 0x42	; 66
     b02:	d8 06       	cpc	r13, r24
     b04:	8f e0       	ldi	r24, 0x0F	; 15
     b06:	e8 06       	cpc	r14, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	f8 06       	cpc	r15, r24
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <main+0x31c>
     b0e:	60 c0       	rjmp	.+192    	; 0xbd0 <main+0x3dc>
		{
			LCD_movecursor(2,4);
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	64 e0       	ldi	r22, 0x04	; 4
     b14:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result/100000) + 48);
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	20 ea       	ldi	r18, 0xA0	; 160
     b1e:	36 e8       	ldi	r19, 0x86	; 134
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
     b2c:	82 2f       	mov	r24, r18
     b2e:	80 5d       	subi	r24, 0xD0	; 208
     b30:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result%100000)/10000 + 48);
     b34:	c5 01       	movw	r24, r10
     b36:	b4 01       	movw	r22, r8
     b38:	20 e1       	ldi	r18, 0x10	; 16
     b3a:	37 e2       	ldi	r19, 0x27	; 39
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     b44:	4b 01       	movw	r8, r22
     b46:	5c 01       	movw	r10, r24
     b48:	82 2f       	mov	r24, r18
     b4a:	80 5d       	subi	r24, 0xD0	; 208
     b4c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((((result%100000)%10000)/1000) + 48);
     b50:	c5 01       	movw	r24, r10
     b52:	b4 01       	movw	r22, r8
     b54:	28 ee       	ldi	r18, 0xE8	; 232
     b56:	33 e0       	ldi	r19, 0x03	; 3
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	82 2f       	mov	r24, r18
     b66:	80 5d       	subi	r24, 0xD0	; 208
     b68:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(((((result%100000)%10000)%1000)/100) + 48);
     b6c:	c5 01       	movw	r24, r10
     b6e:	b4 01       	movw	r22, r8
     b70:	24 e6       	ldi	r18, 0x64	; 100
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     b7c:	4b 01       	movw	r8, r22
     b7e:	5c 01       	movw	r10, r24
     b80:	82 2f       	mov	r24, r18
     b82:	80 5d       	subi	r24, 0xD0	; 208
     b84:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((((((result%100000)%10000)%1000)%100)/10) + 48);
     b88:	c5 01       	movw	r24, r10
     b8a:	b4 01       	movw	r22, r8
     b8c:	a3 01       	movw	r20, r6
     b8e:	92 01       	movw	r18, r4
     b90:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     b94:	82 2f       	mov	r24, r18
     b96:	80 5d       	subi	r24, 0xD0	; 208
     b98:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result)%10 + 48);
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
     ba0:	a3 01       	movw	r20, r6
     ba2:	92 01       	movw	r18, r4
     ba4:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     ba8:	86 2f       	mov	r24, r22
     baa:	80 5d       	subi	r24, 0xD0	; 208
     bac:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     bb0:	8e e2       	ldi	r24, 0x2E	; 46
     bb2:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     bb6:	80 e3       	ldi	r24, 0x30	; 48
     bb8:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     bbc:	80 e3       	ldi	r24, 0x30	; 48
     bbe:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     bc2:	80 e2       	ldi	r24, 0x20	; 32
     bc4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     bc8:	84 ef       	ldi	r24, 0xF4	; 244
     bca:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     bce:	2e ce       	rjmp	.-932    	; 0x82c <main+0x38>
		}	
		else if(result<10000000) // from 1M to 9M Ohm
     bd0:	80 e8       	ldi	r24, 0x80	; 128
     bd2:	c8 16       	cp	r12, r24
     bd4:	86 e9       	ldi	r24, 0x96	; 150
     bd6:	d8 06       	cpc	r13, r24
     bd8:	88 e9       	ldi	r24, 0x98	; 152
     bda:	e8 06       	cpc	r14, r24
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	f8 06       	cpc	r15, r24
     be0:	0c f0       	brlt	.+2      	; 0xbe4 <main+0x3f0>
     be2:	24 ce       	rjmp	.-952    	; 0x82c <main+0x38>
		{
			LCD_movecursor(2,4);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	64 e0       	ldi	r22, 0x04	; 4
     be8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_movecursor>
			LCD_vSend_char((result/1000000) + 48);
     bec:	c7 01       	movw	r24, r14
     bee:	b6 01       	movw	r22, r12
     bf0:	20 e4       	ldi	r18, 0x40	; 64
     bf2:	32 e4       	ldi	r19, 0x42	; 66
     bf4:	4f e0       	ldi	r20, 0x0F	; 15
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     bfc:	4b 01       	movw	r8, r22
     bfe:	5c 01       	movw	r10, r24
     c00:	82 2f       	mov	r24, r18
     c02:	80 5d       	subi	r24, 0xD0	; 208
     c04:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result%1000000)/100000 + 48);
     c08:	c5 01       	movw	r24, r10
     c0a:	b4 01       	movw	r22, r8
     c0c:	20 ea       	ldi	r18, 0xA0	; 160
     c0e:	36 e8       	ldi	r19, 0x86	; 134
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c18:	4b 01       	movw	r8, r22
     c1a:	5c 01       	movw	r10, r24
     c1c:	82 2f       	mov	r24, r18
     c1e:	80 5d       	subi	r24, 0xD0	; 208
     c20:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((((result%1000000)%100000)/10000) + 48);
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	20 e1       	ldi	r18, 0x10	; 16
     c2a:	37 e2       	ldi	r19, 0x27	; 39
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c34:	4b 01       	movw	r8, r22
     c36:	5c 01       	movw	r10, r24
     c38:	82 2f       	mov	r24, r18
     c3a:	80 5d       	subi	r24, 0xD0	; 208
     c3c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(((((result%1000000)%100000)%10000)/1000) + 48);
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	28 ee       	ldi	r18, 0xE8	; 232
     c46:	33 e0       	ldi	r19, 0x03	; 3
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c50:	4b 01       	movw	r8, r22
     c52:	5c 01       	movw	r10, r24
     c54:	82 2f       	mov	r24, r18
     c56:	80 5d       	subi	r24, 0xD0	; 208
     c58:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((((((result%1000000)%100000)%10000)%1000)/100) + 48);
     c5c:	c5 01       	movw	r24, r10
     c5e:	b4 01       	movw	r22, r8
     c60:	24 e6       	ldi	r18, 0x64	; 100
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c6c:	4b 01       	movw	r8, r22
     c6e:	5c 01       	movw	r10, r24
     c70:	82 2f       	mov	r24, r18
     c72:	80 5d       	subi	r24, 0xD0	; 208
     c74:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(((((((result%1000000)%100000)%10000)%1000)%100)/10) + 48);
     c78:	c5 01       	movw	r24, r10
     c7a:	b4 01       	movw	r22, r8
     c7c:	a3 01       	movw	r20, r6
     c7e:	92 01       	movw	r18, r4
     c80:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c84:	82 2f       	mov	r24, r18
     c86:	80 5d       	subi	r24, 0xD0	; 208
     c88:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char((result)%10 + 48);
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	a3 01       	movw	r20, r6
     c92:	92 01       	movw	r18, r4
     c94:	0e 94 4f 08 	call	0x109e	; 0x109e <__divmodsi4>
     c98:	86 2f       	mov	r24, r22
     c9a:	80 5d       	subi	r24, 0xD0	; 208
     c9c:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(46);
     ca0:	8e e2       	ldi	r24, 0x2E	; 46
     ca2:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     ca6:	80 e3       	ldi	r24, 0x30	; 48
     ca8:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char('0');
     cac:	80 e3       	ldi	r24, 0x30	; 48
     cae:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(' ');
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
			LCD_vSend_char(244);
     cb8:	84 ef       	ldi	r24, 0xF4	; 244
     cba:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_vSend_char>
     cbe:	b6 cd       	rjmp	.-1172   	; 0x82c <main+0x38>

00000cc0 <__subsf3>:
     cc0:	50 58       	subi	r21, 0x80	; 128

00000cc2 <__addsf3>:
     cc2:	bb 27       	eor	r27, r27
     cc4:	aa 27       	eor	r26, r26
     cc6:	0e d0       	rcall	.+28     	; 0xce4 <__addsf3x>
     cc8:	4d c1       	rjmp	.+666    	; 0xf64 <__fp_round>
     cca:	3e d1       	rcall	.+636    	; 0xf48 <__fp_pscA>
     ccc:	30 f0       	brcs	.+12     	; 0xcda <__addsf3+0x18>
     cce:	43 d1       	rcall	.+646    	; 0xf56 <__fp_pscB>
     cd0:	20 f0       	brcs	.+8      	; 0xcda <__addsf3+0x18>
     cd2:	31 f4       	brne	.+12     	; 0xce0 <__addsf3+0x1e>
     cd4:	9f 3f       	cpi	r25, 0xFF	; 255
     cd6:	11 f4       	brne	.+4      	; 0xcdc <__addsf3+0x1a>
     cd8:	1e f4       	brtc	.+6      	; 0xce0 <__addsf3+0x1e>
     cda:	33 c1       	rjmp	.+614    	; 0xf42 <__fp_nan>
     cdc:	0e f4       	brtc	.+2      	; 0xce0 <__addsf3+0x1e>
     cde:	e0 95       	com	r30
     ce0:	e7 fb       	bst	r30, 7
     ce2:	29 c1       	rjmp	.+594    	; 0xf36 <__fp_inf>

00000ce4 <__addsf3x>:
     ce4:	e9 2f       	mov	r30, r25
     ce6:	4f d1       	rcall	.+670    	; 0xf86 <__fp_split3>
     ce8:	80 f3       	brcs	.-32     	; 0xcca <__addsf3+0x8>
     cea:	ba 17       	cp	r27, r26
     cec:	62 07       	cpc	r22, r18
     cee:	73 07       	cpc	r23, r19
     cf0:	84 07       	cpc	r24, r20
     cf2:	95 07       	cpc	r25, r21
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <__addsf3x+0x18>
     cf6:	71 f4       	brne	.+28     	; 0xd14 <__addsf3x+0x30>
     cf8:	9e f5       	brtc	.+102    	; 0xd60 <__addsf3x+0x7c>
     cfa:	67 c1       	rjmp	.+718    	; 0xfca <__fp_zero>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3x+0x1c>
     cfe:	e0 95       	com	r30
     d00:	0b 2e       	mov	r0, r27
     d02:	ba 2f       	mov	r27, r26
     d04:	a0 2d       	mov	r26, r0
     d06:	0b 01       	movw	r0, r22
     d08:	b9 01       	movw	r22, r18
     d0a:	90 01       	movw	r18, r0
     d0c:	0c 01       	movw	r0, r24
     d0e:	ca 01       	movw	r24, r20
     d10:	a0 01       	movw	r20, r0
     d12:	11 24       	eor	r1, r1
     d14:	ff 27       	eor	r31, r31
     d16:	59 1b       	sub	r21, r25
     d18:	99 f0       	breq	.+38     	; 0xd40 <__addsf3x+0x5c>
     d1a:	59 3f       	cpi	r21, 0xF9	; 249
     d1c:	50 f4       	brcc	.+20     	; 0xd32 <__addsf3x+0x4e>
     d1e:	50 3e       	cpi	r21, 0xE0	; 224
     d20:	68 f1       	brcs	.+90     	; 0xd7c <__addsf3x+0x98>
     d22:	1a 16       	cp	r1, r26
     d24:	f0 40       	sbci	r31, 0x00	; 0
     d26:	a2 2f       	mov	r26, r18
     d28:	23 2f       	mov	r18, r19
     d2a:	34 2f       	mov	r19, r20
     d2c:	44 27       	eor	r20, r20
     d2e:	58 5f       	subi	r21, 0xF8	; 248
     d30:	f3 cf       	rjmp	.-26     	; 0xd18 <__addsf3x+0x34>
     d32:	46 95       	lsr	r20
     d34:	37 95       	ror	r19
     d36:	27 95       	ror	r18
     d38:	a7 95       	ror	r26
     d3a:	f0 40       	sbci	r31, 0x00	; 0
     d3c:	53 95       	inc	r21
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__addsf3x+0x4e>
     d40:	7e f4       	brtc	.+30     	; 0xd60 <__addsf3x+0x7c>
     d42:	1f 16       	cp	r1, r31
     d44:	ba 0b       	sbc	r27, r26
     d46:	62 0b       	sbc	r22, r18
     d48:	73 0b       	sbc	r23, r19
     d4a:	84 0b       	sbc	r24, r20
     d4c:	ba f0       	brmi	.+46     	; 0xd7c <__addsf3x+0x98>
     d4e:	91 50       	subi	r25, 0x01	; 1
     d50:	a1 f0       	breq	.+40     	; 0xd7a <__addsf3x+0x96>
     d52:	ff 0f       	add	r31, r31
     d54:	bb 1f       	adc	r27, r27
     d56:	66 1f       	adc	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	c2 f7       	brpl	.-16     	; 0xd4e <__addsf3x+0x6a>
     d5e:	0e c0       	rjmp	.+28     	; 0xd7c <__addsf3x+0x98>
     d60:	ba 0f       	add	r27, r26
     d62:	62 1f       	adc	r22, r18
     d64:	73 1f       	adc	r23, r19
     d66:	84 1f       	adc	r24, r20
     d68:	48 f4       	brcc	.+18     	; 0xd7c <__addsf3x+0x98>
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f7 95       	ror	r31
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	08 f0       	brcs	.+2      	; 0xd7a <__addsf3x+0x96>
     d78:	b3 cf       	rjmp	.-154    	; 0xce0 <__addsf3+0x1e>
     d7a:	93 95       	inc	r25
     d7c:	88 0f       	add	r24, r24
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <__addsf3x+0x9e>
     d80:	99 27       	eor	r25, r25
     d82:	ee 0f       	add	r30, r30
     d84:	97 95       	ror	r25
     d86:	87 95       	ror	r24
     d88:	08 95       	ret

00000d8a <__divsf3>:
     d8a:	0c d0       	rcall	.+24     	; 0xda4 <__divsf3x>
     d8c:	eb c0       	rjmp	.+470    	; 0xf64 <__fp_round>
     d8e:	e3 d0       	rcall	.+454    	; 0xf56 <__fp_pscB>
     d90:	40 f0       	brcs	.+16     	; 0xda2 <__divsf3+0x18>
     d92:	da d0       	rcall	.+436    	; 0xf48 <__fp_pscA>
     d94:	30 f0       	brcs	.+12     	; 0xda2 <__divsf3+0x18>
     d96:	21 f4       	brne	.+8      	; 0xda0 <__divsf3+0x16>
     d98:	5f 3f       	cpi	r21, 0xFF	; 255
     d9a:	19 f0       	breq	.+6      	; 0xda2 <__divsf3+0x18>
     d9c:	cc c0       	rjmp	.+408    	; 0xf36 <__fp_inf>
     d9e:	51 11       	cpse	r21, r1
     da0:	15 c1       	rjmp	.+554    	; 0xfcc <__fp_szero>
     da2:	cf c0       	rjmp	.+414    	; 0xf42 <__fp_nan>

00000da4 <__divsf3x>:
     da4:	f0 d0       	rcall	.+480    	; 0xf86 <__fp_split3>
     da6:	98 f3       	brcs	.-26     	; 0xd8e <__divsf3+0x4>

00000da8 <__divsf3_pse>:
     da8:	99 23       	and	r25, r25
     daa:	c9 f3       	breq	.-14     	; 0xd9e <__divsf3+0x14>
     dac:	55 23       	and	r21, r21
     dae:	b1 f3       	breq	.-20     	; 0xd9c <__divsf3+0x12>
     db0:	95 1b       	sub	r25, r21
     db2:	55 0b       	sbc	r21, r21
     db4:	bb 27       	eor	r27, r27
     db6:	aa 27       	eor	r26, r26
     db8:	62 17       	cp	r22, r18
     dba:	73 07       	cpc	r23, r19
     dbc:	84 07       	cpc	r24, r20
     dbe:	38 f0       	brcs	.+14     	; 0xdce <__divsf3_pse+0x26>
     dc0:	9f 5f       	subi	r25, 0xFF	; 255
     dc2:	5f 4f       	sbci	r21, 0xFF	; 255
     dc4:	22 0f       	add	r18, r18
     dc6:	33 1f       	adc	r19, r19
     dc8:	44 1f       	adc	r20, r20
     dca:	aa 1f       	adc	r26, r26
     dcc:	a9 f3       	breq	.-22     	; 0xdb8 <__divsf3_pse+0x10>
     dce:	33 d0       	rcall	.+102    	; 0xe36 <__divsf3_pse+0x8e>
     dd0:	0e 2e       	mov	r0, r30
     dd2:	3a f0       	brmi	.+14     	; 0xde2 <__divsf3_pse+0x3a>
     dd4:	e0 e8       	ldi	r30, 0x80	; 128
     dd6:	30 d0       	rcall	.+96     	; 0xe38 <__divsf3_pse+0x90>
     dd8:	91 50       	subi	r25, 0x01	; 1
     dda:	50 40       	sbci	r21, 0x00	; 0
     ddc:	e6 95       	lsr	r30
     dde:	00 1c       	adc	r0, r0
     de0:	ca f7       	brpl	.-14     	; 0xdd4 <__divsf3_pse+0x2c>
     de2:	29 d0       	rcall	.+82     	; 0xe36 <__divsf3_pse+0x8e>
     de4:	fe 2f       	mov	r31, r30
     de6:	27 d0       	rcall	.+78     	; 0xe36 <__divsf3_pse+0x8e>
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	88 1f       	adc	r24, r24
     dee:	bb 1f       	adc	r27, r27
     df0:	26 17       	cp	r18, r22
     df2:	37 07       	cpc	r19, r23
     df4:	48 07       	cpc	r20, r24
     df6:	ab 07       	cpc	r26, r27
     df8:	b0 e8       	ldi	r27, 0x80	; 128
     dfa:	09 f0       	breq	.+2      	; 0xdfe <__divsf3_pse+0x56>
     dfc:	bb 0b       	sbc	r27, r27
     dfe:	80 2d       	mov	r24, r0
     e00:	bf 01       	movw	r22, r30
     e02:	ff 27       	eor	r31, r31
     e04:	93 58       	subi	r25, 0x83	; 131
     e06:	5f 4f       	sbci	r21, 0xFF	; 255
     e08:	2a f0       	brmi	.+10     	; 0xe14 <__divsf3_pse+0x6c>
     e0a:	9e 3f       	cpi	r25, 0xFE	; 254
     e0c:	51 05       	cpc	r21, r1
     e0e:	68 f0       	brcs	.+26     	; 0xe2a <__divsf3_pse+0x82>
     e10:	92 c0       	rjmp	.+292    	; 0xf36 <__fp_inf>
     e12:	dc c0       	rjmp	.+440    	; 0xfcc <__fp_szero>
     e14:	5f 3f       	cpi	r21, 0xFF	; 255
     e16:	ec f3       	brlt	.-6      	; 0xe12 <__divsf3_pse+0x6a>
     e18:	98 3e       	cpi	r25, 0xE8	; 232
     e1a:	dc f3       	brlt	.-10     	; 0xe12 <__divsf3_pse+0x6a>
     e1c:	86 95       	lsr	r24
     e1e:	77 95       	ror	r23
     e20:	67 95       	ror	r22
     e22:	b7 95       	ror	r27
     e24:	f7 95       	ror	r31
     e26:	9f 5f       	subi	r25, 0xFF	; 255
     e28:	c9 f7       	brne	.-14     	; 0xe1c <__divsf3_pse+0x74>
     e2a:	88 0f       	add	r24, r24
     e2c:	91 1d       	adc	r25, r1
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	97 f9       	bld	r25, 7
     e34:	08 95       	ret
     e36:	e1 e0       	ldi	r30, 0x01	; 1
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	bb 1f       	adc	r27, r27
     e40:	62 17       	cp	r22, r18
     e42:	73 07       	cpc	r23, r19
     e44:	84 07       	cpc	r24, r20
     e46:	ba 07       	cpc	r27, r26
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__divsf3_pse+0xaa>
     e4a:	62 1b       	sub	r22, r18
     e4c:	73 0b       	sbc	r23, r19
     e4e:	84 0b       	sbc	r24, r20
     e50:	ba 0b       	sbc	r27, r26
     e52:	ee 1f       	adc	r30, r30
     e54:	88 f7       	brcc	.-30     	; 0xe38 <__divsf3_pse+0x90>
     e56:	e0 95       	com	r30
     e58:	08 95       	ret

00000e5a <__fixsfsi>:
     e5a:	04 d0       	rcall	.+8      	; 0xe64 <__fixunssfsi>
     e5c:	68 94       	set
     e5e:	b1 11       	cpse	r27, r1
     e60:	b5 c0       	rjmp	.+362    	; 0xfcc <__fp_szero>
     e62:	08 95       	ret

00000e64 <__fixunssfsi>:
     e64:	98 d0       	rcall	.+304    	; 0xf96 <__fp_splitA>
     e66:	88 f0       	brcs	.+34     	; 0xe8a <__fixunssfsi+0x26>
     e68:	9f 57       	subi	r25, 0x7F	; 127
     e6a:	90 f0       	brcs	.+36     	; 0xe90 <__fixunssfsi+0x2c>
     e6c:	b9 2f       	mov	r27, r25
     e6e:	99 27       	eor	r25, r25
     e70:	b7 51       	subi	r27, 0x17	; 23
     e72:	a0 f0       	brcs	.+40     	; 0xe9c <__fixunssfsi+0x38>
     e74:	d1 f0       	breq	.+52     	; 0xeaa <__fixunssfsi+0x46>
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	1a f0       	brmi	.+6      	; 0xe86 <__fixunssfsi+0x22>
     e80:	ba 95       	dec	r27
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__fixunssfsi+0x12>
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <__fixunssfsi+0x46>
     e86:	b1 30       	cpi	r27, 0x01	; 1
     e88:	81 f0       	breq	.+32     	; 0xeaa <__fixunssfsi+0x46>
     e8a:	9f d0       	rcall	.+318    	; 0xfca <__fp_zero>
     e8c:	b1 e0       	ldi	r27, 0x01	; 1
     e8e:	08 95       	ret
     e90:	9c c0       	rjmp	.+312    	; 0xfca <__fp_zero>
     e92:	67 2f       	mov	r22, r23
     e94:	78 2f       	mov	r23, r24
     e96:	88 27       	eor	r24, r24
     e98:	b8 5f       	subi	r27, 0xF8	; 248
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__fixunssfsi+0x46>
     e9c:	b9 3f       	cpi	r27, 0xF9	; 249
     e9e:	cc f3       	brlt	.-14     	; 0xe92 <__fixunssfsi+0x2e>
     ea0:	86 95       	lsr	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b3 95       	inc	r27
     ea8:	d9 f7       	brne	.-10     	; 0xea0 <__fixunssfsi+0x3c>
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__fixunssfsi+0x56>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__floatunsisf>:
     ebc:	e8 94       	clt
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__floatsisf+0x12>

00000ec0 <__floatsisf>:
     ec0:	97 fb       	bst	r25, 7
     ec2:	3e f4       	brtc	.+14     	; 0xed2 <__floatsisf+0x12>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	99 23       	and	r25, r25
     ed4:	a9 f0       	breq	.+42     	; 0xf00 <__floatsisf+0x40>
     ed6:	f9 2f       	mov	r31, r25
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	bb 27       	eor	r27, r27
     edc:	93 95       	inc	r25
     ede:	f6 95       	lsr	r31
     ee0:	87 95       	ror	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f1 11       	cpse	r31, r1
     eea:	f8 cf       	rjmp	.-16     	; 0xedc <__floatsisf+0x1c>
     eec:	fa f4       	brpl	.+62     	; 0xf2c <__floatsisf+0x6c>
     eee:	bb 0f       	add	r27, r27
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__floatsisf+0x36>
     ef2:	60 ff       	sbrs	r22, 0
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__floatsisf+0x6c>
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <__floatsisf+0x6c>
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <__floatsisf+0x48>
     f04:	96 e9       	ldi	r25, 0x96	; 150
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <__floatsisf+0x6a>
     f08:	77 23       	and	r23, r23
     f0a:	21 f0       	breq	.+8      	; 0xf14 <__floatsisf+0x54>
     f0c:	9e e8       	ldi	r25, 0x8E	; 142
     f0e:	87 2f       	mov	r24, r23
     f10:	76 2f       	mov	r23, r22
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__floatsisf+0x5e>
     f14:	66 23       	and	r22, r22
     f16:	71 f0       	breq	.+28     	; 0xf34 <__floatsisf+0x74>
     f18:	96 e8       	ldi	r25, 0x86	; 134
     f1a:	86 2f       	mov	r24, r22
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	2a f0       	brmi	.+10     	; 0xf2c <__floatsisf+0x6c>
     f22:	9a 95       	dec	r25
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	da f7       	brpl	.-10     	; 0xf22 <__floatsisf+0x62>
     f2c:	88 0f       	add	r24, r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <__fp_inf>:
     f36:	97 f9       	bld	r25, 7
     f38:	9f 67       	ori	r25, 0x7F	; 127
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	08 95       	ret

00000f42 <__fp_nan>:
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	80 ec       	ldi	r24, 0xC0	; 192
     f46:	08 95       	ret

00000f48 <__fp_pscA>:
     f48:	00 24       	eor	r0, r0
     f4a:	0a 94       	dec	r0
     f4c:	16 16       	cp	r1, r22
     f4e:	17 06       	cpc	r1, r23
     f50:	18 06       	cpc	r1, r24
     f52:	09 06       	cpc	r0, r25
     f54:	08 95       	ret

00000f56 <__fp_pscB>:
     f56:	00 24       	eor	r0, r0
     f58:	0a 94       	dec	r0
     f5a:	12 16       	cp	r1, r18
     f5c:	13 06       	cpc	r1, r19
     f5e:	14 06       	cpc	r1, r20
     f60:	05 06       	cpc	r0, r21
     f62:	08 95       	ret

00000f64 <__fp_round>:
     f64:	09 2e       	mov	r0, r25
     f66:	03 94       	inc	r0
     f68:	00 0c       	add	r0, r0
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__fp_round+0xc>
     f6c:	88 23       	and	r24, r24
     f6e:	52 f0       	brmi	.+20     	; 0xf84 <__fp_round+0x20>
     f70:	bb 0f       	add	r27, r27
     f72:	40 f4       	brcc	.+16     	; 0xf84 <__fp_round+0x20>
     f74:	bf 2b       	or	r27, r31
     f76:	11 f4       	brne	.+4      	; 0xf7c <__fp_round+0x18>
     f78:	60 ff       	sbrs	r22, 0
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <__fp_round+0x20>
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	08 95       	ret

00000f86 <__fp_split3>:
     f86:	57 fd       	sbrc	r21, 7
     f88:	90 58       	subi	r25, 0x80	; 128
     f8a:	44 0f       	add	r20, r20
     f8c:	55 1f       	adc	r21, r21
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <__fp_splitA+0x10>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	71 f0       	breq	.+28     	; 0xfb0 <__fp_splitA+0x1a>
     f94:	47 95       	ror	r20

00000f96 <__fp_splitA>:
     f96:	88 0f       	add	r24, r24
     f98:	97 fb       	bst	r25, 7
     f9a:	99 1f       	adc	r25, r25
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <__fp_splitA+0x20>
     f9e:	9f 3f       	cpi	r25, 0xFF	; 255
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <__fp_splitA+0x2a>
     fa2:	87 95       	ror	r24
     fa4:	08 95       	ret
     fa6:	12 16       	cp	r1, r18
     fa8:	13 06       	cpc	r1, r19
     faa:	14 06       	cpc	r1, r20
     fac:	55 1f       	adc	r21, r21
     fae:	f2 cf       	rjmp	.-28     	; 0xf94 <__fp_split3+0xe>
     fb0:	46 95       	lsr	r20
     fb2:	f1 df       	rcall	.-30     	; 0xf96 <__fp_splitA>
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <__fp_splitA+0x30>
     fb6:	16 16       	cp	r1, r22
     fb8:	17 06       	cpc	r1, r23
     fba:	18 06       	cpc	r1, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	f1 cf       	rjmp	.-30     	; 0xfa2 <__fp_splitA+0xc>
     fc0:	86 95       	lsr	r24
     fc2:	71 05       	cpc	r23, r1
     fc4:	61 05       	cpc	r22, r1
     fc6:	08 94       	sec
     fc8:	08 95       	ret

00000fca <__fp_zero>:
     fca:	e8 94       	clt

00000fcc <__fp_szero>:
     fcc:	bb 27       	eor	r27, r27
     fce:	66 27       	eor	r22, r22
     fd0:	77 27       	eor	r23, r23
     fd2:	cb 01       	movw	r24, r22
     fd4:	97 f9       	bld	r25, 7
     fd6:	08 95       	ret

00000fd8 <__mulsf3>:
     fd8:	0b d0       	rcall	.+22     	; 0xff0 <__mulsf3x>
     fda:	c4 cf       	rjmp	.-120    	; 0xf64 <__fp_round>
     fdc:	b5 df       	rcall	.-150    	; 0xf48 <__fp_pscA>
     fde:	28 f0       	brcs	.+10     	; 0xfea <__mulsf3+0x12>
     fe0:	ba df       	rcall	.-140    	; 0xf56 <__fp_pscB>
     fe2:	18 f0       	brcs	.+6      	; 0xfea <__mulsf3+0x12>
     fe4:	95 23       	and	r25, r21
     fe6:	09 f0       	breq	.+2      	; 0xfea <__mulsf3+0x12>
     fe8:	a6 cf       	rjmp	.-180    	; 0xf36 <__fp_inf>
     fea:	ab cf       	rjmp	.-170    	; 0xf42 <__fp_nan>
     fec:	11 24       	eor	r1, r1
     fee:	ee cf       	rjmp	.-36     	; 0xfcc <__fp_szero>

00000ff0 <__mulsf3x>:
     ff0:	ca df       	rcall	.-108    	; 0xf86 <__fp_split3>
     ff2:	a0 f3       	brcs	.-24     	; 0xfdc <__mulsf3+0x4>

00000ff4 <__mulsf3_pse>:
     ff4:	95 9f       	mul	r25, r21
     ff6:	d1 f3       	breq	.-12     	; 0xfec <__mulsf3+0x14>
     ff8:	95 0f       	add	r25, r21
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	55 1f       	adc	r21, r21
     ffe:	62 9f       	mul	r22, r18
    1000:	f0 01       	movw	r30, r0
    1002:	72 9f       	mul	r23, r18
    1004:	bb 27       	eor	r27, r27
    1006:	f0 0d       	add	r31, r0
    1008:	b1 1d       	adc	r27, r1
    100a:	63 9f       	mul	r22, r19
    100c:	aa 27       	eor	r26, r26
    100e:	f0 0d       	add	r31, r0
    1010:	b1 1d       	adc	r27, r1
    1012:	aa 1f       	adc	r26, r26
    1014:	64 9f       	mul	r22, r20
    1016:	66 27       	eor	r22, r22
    1018:	b0 0d       	add	r27, r0
    101a:	a1 1d       	adc	r26, r1
    101c:	66 1f       	adc	r22, r22
    101e:	82 9f       	mul	r24, r18
    1020:	22 27       	eor	r18, r18
    1022:	b0 0d       	add	r27, r0
    1024:	a1 1d       	adc	r26, r1
    1026:	62 1f       	adc	r22, r18
    1028:	73 9f       	mul	r23, r19
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	62 1f       	adc	r22, r18
    1030:	83 9f       	mul	r24, r19
    1032:	a0 0d       	add	r26, r0
    1034:	61 1d       	adc	r22, r1
    1036:	22 1f       	adc	r18, r18
    1038:	74 9f       	mul	r23, r20
    103a:	33 27       	eor	r19, r19
    103c:	a0 0d       	add	r26, r0
    103e:	61 1d       	adc	r22, r1
    1040:	23 1f       	adc	r18, r19
    1042:	84 9f       	mul	r24, r20
    1044:	60 0d       	add	r22, r0
    1046:	21 1d       	adc	r18, r1
    1048:	82 2f       	mov	r24, r18
    104a:	76 2f       	mov	r23, r22
    104c:	6a 2f       	mov	r22, r26
    104e:	11 24       	eor	r1, r1
    1050:	9f 57       	subi	r25, 0x7F	; 127
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	8a f0       	brmi	.+34     	; 0x1078 <__mulsf3_pse+0x84>
    1056:	e1 f0       	breq	.+56     	; 0x1090 <__mulsf3_pse+0x9c>
    1058:	88 23       	and	r24, r24
    105a:	4a f0       	brmi	.+18     	; 0x106e <__mulsf3_pse+0x7a>
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	bb 1f       	adc	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	a9 f7       	brne	.-22     	; 0x1058 <__mulsf3_pse+0x64>
    106e:	9e 3f       	cpi	r25, 0xFE	; 254
    1070:	51 05       	cpc	r21, r1
    1072:	70 f0       	brcs	.+28     	; 0x1090 <__mulsf3_pse+0x9c>
    1074:	60 cf       	rjmp	.-320    	; 0xf36 <__fp_inf>
    1076:	aa cf       	rjmp	.-172    	; 0xfcc <__fp_szero>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	ec f3       	brlt	.-6      	; 0x1076 <__mulsf3_pse+0x82>
    107c:	98 3e       	cpi	r25, 0xE8	; 232
    107e:	dc f3       	brlt	.-10     	; 0x1076 <__mulsf3_pse+0x82>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b7 95       	ror	r27
    1088:	f7 95       	ror	r31
    108a:	e7 95       	ror	r30
    108c:	9f 5f       	subi	r25, 0xFF	; 255
    108e:	c1 f7       	brne	.-16     	; 0x1080 <__mulsf3_pse+0x8c>
    1090:	fe 2b       	or	r31, r30
    1092:	88 0f       	add	r24, r24
    1094:	91 1d       	adc	r25, r1
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret

0000109e <__divmodsi4>:
    109e:	97 fb       	bst	r25, 7
    10a0:	09 2e       	mov	r0, r25
    10a2:	05 26       	eor	r0, r21
    10a4:	0e d0       	rcall	.+28     	; 0x10c2 <__divmodsi4_neg1>
    10a6:	57 fd       	sbrc	r21, 7
    10a8:	04 d0       	rcall	.+8      	; 0x10b2 <__divmodsi4_neg2>
    10aa:	14 d0       	rcall	.+40     	; 0x10d4 <__udivmodsi4>
    10ac:	0a d0       	rcall	.+20     	; 0x10c2 <__divmodsi4_neg1>
    10ae:	00 1c       	adc	r0, r0
    10b0:	38 f4       	brcc	.+14     	; 0x10c0 <__divmodsi4_exit>

000010b2 <__divmodsi4_neg2>:
    10b2:	50 95       	com	r21
    10b4:	40 95       	com	r20
    10b6:	30 95       	com	r19
    10b8:	21 95       	neg	r18
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	4f 4f       	sbci	r20, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255

000010c0 <__divmodsi4_exit>:
    10c0:	08 95       	ret

000010c2 <__divmodsi4_neg1>:
    10c2:	f6 f7       	brtc	.-4      	; 0x10c0 <__divmodsi4_exit>
    10c4:	90 95       	com	r25
    10c6:	80 95       	com	r24
    10c8:	70 95       	com	r23
    10ca:	61 95       	neg	r22
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__udivmodsi4>:
    10d4:	a1 e2       	ldi	r26, 0x21	; 33
    10d6:	1a 2e       	mov	r1, r26
    10d8:	aa 1b       	sub	r26, r26
    10da:	bb 1b       	sub	r27, r27
    10dc:	fd 01       	movw	r30, r26
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <__udivmodsi4_ep>

000010e0 <__udivmodsi4_loop>:
    10e0:	aa 1f       	adc	r26, r26
    10e2:	bb 1f       	adc	r27, r27
    10e4:	ee 1f       	adc	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	a2 17       	cp	r26, r18
    10ea:	b3 07       	cpc	r27, r19
    10ec:	e4 07       	cpc	r30, r20
    10ee:	f5 07       	cpc	r31, r21
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <__udivmodsi4_ep>
    10f2:	a2 1b       	sub	r26, r18
    10f4:	b3 0b       	sbc	r27, r19
    10f6:	e4 0b       	sbc	r30, r20
    10f8:	f5 0b       	sbc	r31, r21

000010fa <__udivmodsi4_ep>:
    10fa:	66 1f       	adc	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	1a 94       	dec	r1
    1104:	69 f7       	brne	.-38     	; 0x10e0 <__udivmodsi4_loop>
    1106:	60 95       	com	r22
    1108:	70 95       	com	r23
    110a:	80 95       	com	r24
    110c:	90 95       	com	r25
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	bd 01       	movw	r22, r26
    1114:	cf 01       	movw	r24, r30
    1116:	08 95       	ret

00001118 <_exit>:
    1118:	f8 94       	cli

0000111a <__stop_program>:
    111a:	ff cf       	rjmp	.-2      	; 0x111a <__stop_program>
